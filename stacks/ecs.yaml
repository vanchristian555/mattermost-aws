AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  VpcId:
    Type: String

  PrivateSubnet1Id:
    Type: String

  PrivateSubnet2Id:
    Type: String

  DatabaseEndpointAddress:
    Type: String

  LoadBalancerTargetGroupArn:
    Type: String

  LogGroupName:
    Type: String

  AlarmTopicArn:
    Type: String

Resources:
  MattermostTaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Mattermost ECS task
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8065
          ToPort: 8065
          CidrIp: 10.0.0.0/16

  MattermostCluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - FARGATE
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  MattermostTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  MattermostTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref MattermostTaskExecutionRole
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        - Image: mattermost/mattermost-team-edition
          Name: !Ref AWS::StackName
          Environment:
            - Name: MM_SQLSETTINGS_DRIVERNAME
              Value: postgres
            - Name: MM_SQLSETTINGS_DATASOURCE
              Value: !Sub
                - postgres://${User}:${Password}@${DatabaseEndpointAddress}:5432/${DBName}?connect_timeout=10
                - User: mattermost
                  Password: mattermost
                  DBName: mattermost
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroupName
              awslogs-region: !Ref AWS::Region
              awslogs-create-group: true
              awslogs-stream-prefix: ecs
          PortMappings:
            - AppProtocol: http
              ContainerPort: 8065
              HostPort: 8065

  MattermostService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref MattermostCluster
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1Id
            - !Ref PrivateSubnet2Id
          SecurityGroups:
            - !Ref MattermostTaskSecurityGroup
      ServiceName: mattermost
      TaskDefinition: !Ref MattermostTaskDefinition
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      LoadBalancers:
        - ContainerName: !Ref AWS::StackName
          ContainerPort: 8065
          TargetGroupArn: !Ref LoadBalancerTargetGroupArn

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 3
      MinCapacity: 1
      ResourceId: !Sub service/${MattermostCluster}/${MattermostService.Name}
      RoleARN: !GetAtt AutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-ecs-auto-scaling
      PolicyType: TargetTrackingScaling
      ScalableDimension: ecs:service:DesiredCount
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  CPUUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref AlarmTopicArn
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 50
      Threshold: 50
      TreatMissingData: ignore
      Statistic: Average
      Dimensions:
        - Name: ClusterName
          Value: !Ref MattermostCluster
        - Name: ServiceName
          Value: !GetAtt MattermostService.Name
